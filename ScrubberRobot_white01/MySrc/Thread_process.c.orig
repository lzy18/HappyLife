/**
  ******************************************************************************
  * @file    Thread_process.c
  * @author  刘振宇
  * @version V1.0
  * @date    2018.3.5
  * @brief   这个文件是程序的处理逻辑和保护
  ******************************************************************************
  * @attention
  *
  ******************************************************************************
  */

/* USER CODE BEGIN */

/* Includes ------------------------------------------------------------------*/
#include "soft.h"

/* Define --------------------------------------------------------------------*/

/* Variables -----------------------------------------------------------------*/

const uint16 M_PROTECTCURRENT = 700; //1.8A  //273,//1A//292;//中扫保护电流 500MA，计算公式 1A*0.47R*4096/3.3
const uint16 M_STOPCURRENT = 546; //2A//369;//788;//中扫停止电流1350MA，计算公式 1A*0.47R*4096/3.3
//const uint16 DUST_PROTECTCURRENT =163; //0.6A//137;//292;//灰尘风机电流 500MA
const uint16 DUST_PROTECTCURRENT = 400; //0.6A//137;//292;//灰尘风机电流 500MA liu 修改 原350
const uint16 WHEEL_PROTECTCURRENT = 300; //20151202 实测堵转电流 345

const uint16 BATTERY_PREOTECTTEMP = 815; //电池保护温度 60度

/* Private variables */
u32 pro_time;

/* Function prototypes -------------------------------------------------------*/

/* Private function prototypes */
void RWheelLidiProtect(void);
void LRWheelCurrentProtect(void);
void FWheelSpeedProtect(void);
void LRWheelSpeedProtect(void);
void LWheelLidiProtect(void);


u16 batter_electricity, charge_electricity, r_brush_electricity, m_brush_state, l_brush_electricity, magnetism_ad,m_brush_electricity;
u16 box_set_l,box_set_r,box_set_m;

/* Hook prototypes */

/**
   * @brief
   * @param
   * @param
   *
   * @retval
	 * 1.灰尘盒检测未做硬件，这版本可利用风机反馈信号检测灰尘盒是否安装，安装到位后才启动中扫、边扫。
	 * 2.电流检测只做中扫，风机和边扫电机自带保护板，还可利用反馈信号检测是否异常
   */
void Go_mode(void)
{
    static u8 flash_led = 0;

		m_brush_electricity = account_current(PA0_MBrush);



  
    if(r_vr.velocity > 1500)  //右刷转速异常
    {
        s_and.error_code |= 0x08;
    }
    else
        {
            s_and.error_code &= ~0x08;
        }
    if(m_brush_electricity > 1000) //700
    {
        s_and.error_code |= 0x10; //中扫电流异常
    }
    else
        {
            s_and.error_code &= ~0x10;
        }
    if(r_vr.velocity > 1500)     //左刷转速异常
    {
        s_and.error_code |= 0x20;
    }
    else
						{
            s_and.error_code &= ~0x20;
        }

    if(fan1.velocity<1200)
    {
        s_and.error_code |= 0x40; //风机1转速异常
    }
    else
    {
        s_and.error_code &= ~0x40;
    }

    if(fan2.velocity<1200)
    {
        s_and.error_code |= 0x80; //风机2转速异常
    }
    else
    {
        s_and.error_code &= ~0x80;
    }
		
//通讯异常在安卓端做判断,3秒未接受到串口上报数据则判断为通讯异常
//    if((s_and.error_code & 0x7a) || (andr_order == 5))
//    {
//        HAL_GPIO_WritePin (PE10_FANEN_GPIO_Port, PE10_FANEN_Pin, GPIO_PIN_RESET);
//        HAL_GPIO_WritePin (PE13_LEFTBURSH_EN_GPIO_Port, PE13_LEFTBURSH_EN_Pin, GPIO_PIN_SET);
//        HAL_GPIO_WritePin (PE14_RIGHTBRUSH_EN_GPIO_Port, PE14_RIGHTBRUSH_EN_Pin, GPIO_PIN_SET);
//        HAL_GPIO_WritePin (PB13_M_EN_GPIO_Port, PB13_M_EN_Pin, GPIO_PIN_RESET);
//        InitRap(&m_vr);
//        InitRap(&l_vr);
//        InitRap(&r_vr);
//    }


}

/* USER CODE END */


